#include <map-service/download/CatalogClient.h>
#include <map-service/download/ClientSettings.h>

#include <gtest/gtest.h>

#include <unordered_set>

namespace
{
using namespace map_service::download;

ClientSettings TestClientSettings( )
{
    return GetDBClientForCISettings( );
    // return GetDBClientSettings( );
}

CatalogClient CreateClient( const ClientSettings& settings = TestClientSettings( ) )
{
    const auto catalog_name = "sensors4rail2";

    return CatalogClient( catalog_name, settings );
}


} // unnamed namespace

TEST( CatalogClientTest, GetLatestVersion )
{
    // Arrange / Act / Assert
    ASSERT_GT( CreateClient( ).GetLatestVersion( ), 0 ) ;
}

TEST( CatalogClientTest, GetMetadata )
{
    // Arrange
    Version catalog_version = 3;
    const auto client = CreateClient( );
    // Act
    auto response = client.GetMetadata( catalog_version );

    // Assert
    const auto& error = response.error_;
    ASSERT_EQ( error.error_code_, ErrorCode::Success );
    ASSERT_EQ( error.curl_code_, CURLE_OK );

    const auto& content = response.content_;

    ASSERT_EQ( content.id_, "sensors4rail2" );
    // TODO: Currently, catalog.version_ always contains latest_version_
    // Catalog.version_ should be the version form request.
    ASSERT_GT( content.version_, 0 );
    ASSERT_GT( content.latest_version_, 0 );
    ASSERT_GT( content.modification_date_, 0 );
    ASSERT_FALSE( content.description_.empty( ) );
    ASSERT_FALSE( content.layers_.empty( ) );

    std::unordered_set< std::string > layers = { "pld_f_map",
        "hvle",
        "track2tiles",
        "rca-topology",
        "rca-topology-geometry",
        "risk-assessment-zones",
        "landmarks",
        "rca-centerline" };

    for ( const auto& layer : content.layers_ )
    {
        ASSERT_NE( layers.find( layer ), layers.cend( ) );
    }
}
